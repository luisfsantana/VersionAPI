# coding: utf-8

from __future__ import absolute_import
from .base_model_ import Model
from datetime import date, datetime
from typing import List, Dict
from ..util import deserialize_model


class Property(Model):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, x: float=None, y: float=None, title: str=None, price: float=None, description: str=None, beds: int=None, baths: int=None, square_meters: float=None):
        """
        Property - a model defined in Swagger

        :param x: The x of this Property.
        :type x: float
        :param y: The y of this Property.
        :type y: float
        :param title: The title of this Property.
        :type title: str
        :param price: The price of this Property.
        :type price: float
        :param description: The description of this Property.
        :type description: str
        :param beds: The beds of this Property.
        :type beds: int
        :param baths: The baths of this Property.
        :type baths: int
        :param square_meters: The square_meters of this Property.
        :type square_meters: float
        """
        self.swagger_types = {
            'x': float,
            'y': float,
            'title': str,
            'price': float,
            'description': str,
            'beds': int,
            'baths': int,
            'square_meters': float
        }

        self.attribute_map = {
            'x': 'x',
            'y': 'y',
            'title': 'title',
            'price': 'price',
            'description': 'description',
            'beds': 'beds',
            'baths': 'baths',
            'square_meters': 'squareMeters'
        }

        self._x = x
        self._y = y
        self._title = title
        self._price = price
        self._description = description
        self._beds = beds
        self._baths = baths
        self._square_meters = square_meters

    @classmethod
    def from_dict(cls, dikt) -> 'Property':
        """
        Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Property of this Property.
        :rtype: Property
        """
        return deserialize_model(dikt, cls)

    @property
    def x(self) -> float:
        """
        Gets the x of this Property.

        :return: The x of this Property.
        :rtype: float
        """
        return self._x

    @x.setter
    def x(self, x: float):
        """
        Sets the x of this Property.

        :param x: The x of this Property.
        :type x: float
        """
        if x is None:
            raise ValueError("Invalid value for `x`, must not be `None`")

        self._x = x

    @property
    def y(self) -> float:
        """
        Gets the y of this Property.

        :return: The y of this Property.
        :rtype: float
        """
        return self._y

    @y.setter
    def y(self, y: float):
        """
        Sets the y of this Property.

        :param y: The y of this Property.
        :type y: float
        """
        if y is None:
            raise ValueError("Invalid value for `y`, must not be `None`")

        self._y = y

    @property
    def title(self) -> str:
        """
        Gets the title of this Property.

        :return: The title of this Property.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title: str):
        """
        Sets the title of this Property.

        :param title: The title of this Property.
        :type title: str
        """
        if title is None:
            raise ValueError("Invalid value for `title`, must not be `None`")
        if title is not None and len(title) < 1:
            raise ValueError("Invalid value for `title`, length must be greater than or equal to `1`")

        self._title = title

    @property
    def price(self) -> float:
        """
        Gets the price of this Property.

        :return: The price of this Property.
        :rtype: float
        """
        return self._price

    @price.setter
    def price(self, price: float):
        """
        Sets the price of this Property.

        :param price: The price of this Property.
        :type price: float
        """
        if price is None:
            raise ValueError("Invalid value for `price`, must not be `None`")

        self._price = price

    @property
    def description(self) -> str:
        """
        Gets the description of this Property.

        :return: The description of this Property.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description: str):
        """
        Sets the description of this Property.

        :param description: The description of this Property.
        :type description: str
        """
        if description is None:
            raise ValueError("Invalid value for `description`, must not be `None`")

        self._description = description

    @property
    def beds(self) -> int:
        """
        Gets the beds of this Property.

        :return: The beds of this Property.
        :rtype: int
        """
        return self._beds

    @beds.setter
    def beds(self, beds: int):
        """
        Sets the beds of this Property.

        :param beds: The beds of this Property.
        :type beds: int
        """
        if beds is None:
            raise ValueError("Invalid value for `beds`, must not be `None`")

        self._beds = beds

    @property
    def baths(self) -> int:
        """
        Gets the baths of this Property.

        :return: The baths of this Property.
        :rtype: int
        """
        return self._baths

    @baths.setter
    def baths(self, baths: int):
        """
        Sets the baths of this Property.

        :param baths: The baths of this Property.
        :type baths: int
        """
        if baths is None:
            raise ValueError("Invalid value for `baths`, must not be `None`")

        self._baths = baths

    @property
    def square_meters(self) -> float:
        """
        Gets the square_meters of this Property.

        :return: The square_meters of this Property.
        :rtype: float
        """
        return self._square_meters

    @square_meters.setter
    def square_meters(self, square_meters: float):
        """
        Sets the square_meters of this Property.

        :param square_meters: The square_meters of this Property.
        :type square_meters: float
        """
        if square_meters is None:
            raise ValueError("Invalid value for `square_meters`, must not be `None`")

        self._square_meters = square_meters

